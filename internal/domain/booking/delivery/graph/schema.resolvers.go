package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"booking/internal/domain/booking/entities"
	"booking/pkg/graphQL/generated"
	"context"
	"strconv"
)

// Booking Room field resolver
func (r *bookingResolver) Room(ctx context.Context, obj *entities.Booking) (*entities.Room, error) {
	room, err := r.Usecase.GetRoomByID(ctx, obj.RoomID)
	if err != nil {
		return nil, err
	}
	return room, nil
}

// Booking Customer field resolver
func (r *bookingResolver) Customer(ctx context.Context, obj *entities.Booking) (*entities.Customer, error) {
	customer, err := r.Usecase.GetCustomerByID(ctx, obj.CustomerID)
	if err != nil {
		return nil, err
	}
	return customer, nil
}

// CreateHotel resolver
func (r *mutationResolver) CreateHotel(ctx context.Context, name string, address string) (*entities.Hotel, error) {
	hotel := &entities.Hotel{
		Name:    name,
		Address: address,
	}
	hotelID, err := r.Usecase.CreateHotel(ctx, hotel)
	if err != nil {
		return nil, err
	}
	hotel.ID = hotelID
	return hotel, nil
}

// UpdateHotel resolver
func (r *mutationResolver) UpdateHotel(ctx context.Context, id string, name *string, address *string) (*entities.Hotel, error) {
	hotelID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	hotel := &entities.Hotel{
		ID: hotelID,
	}
	if name != nil {
		hotel.Name = *name
	}
	if address != nil {
		hotel.Address = *address
	}
	err = r.Usecase.UpdateHotel(ctx, hotel)
	if err != nil {
		return nil, err
	}
	return hotel, nil
}

// DeleteHotel resolver
func (r *mutationResolver) DeleteHotel(ctx context.Context, id string) (bool, error) {
	hotelID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.Usecase.DeleteHotel(ctx, hotelID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateRoom resolver
func (r *mutationResolver) CreateRoom(ctx context.Context, hotelID string, number string, typeArg string, price float64) (*entities.Room, error) {
	hotelIDInt, err := strconv.Atoi(hotelID)
	if err != nil {
		return nil, err
	}
	room := &entities.Room{
		HotelID: hotelIDInt,
		Number:  number,
		Type:    typeArg,
		Price:   price,
	}
	roomID, err := r.Usecase.CreateRoom(ctx, room)
	if err != nil {
		return nil, err
	}
	room.ID = roomID
	return room, nil
}

// UpdateRoom resolver
func (r *mutationResolver) UpdateRoom(ctx context.Context, id string, number *string, typeArg *string, price *float64) (*entities.Room, error) {
	roomID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	room := &entities.Room{
		ID: roomID,
	}
	if number != nil {
		room.Number = *number
	}
	if typeArg != nil {
		room.Type = *typeArg
	}
	if price != nil {
		room.Price = *price
	}
	err = r.Usecase.UpdateRoom(ctx, room)
	if err != nil {
		return nil, err
	}
	return room, nil
}

// DeleteRoom resolver
func (r *mutationResolver) DeleteRoom(ctx context.Context, id string) (bool, error) {
	roomID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.Usecase.DeleteRoom(ctx, roomID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateBooking resolver
func (r *mutationResolver) CreateBooking(ctx context.Context, roomID string, customerID string, checkIn string, checkOut string, status string) (*entities.Booking, error) {
	roomIDInt, err := strconv.Atoi(roomID)
	if err != nil {
		return nil, err
	}
	customerIDInt, err := strconv.Atoi(customerID)
	if err != nil {
		return nil, err
	}
	booking := &entities.Booking{
		RoomID:     roomIDInt,
		CustomerID: customerIDInt,
		CheckIn:    checkIn,
		CheckOut:   checkOut,
		Status:     status,
	}
	bookingID, err := r.Usecase.CreateBooking(ctx, booking)
	if err != nil {
		return nil, err
	}
	booking.ID = bookingID
	return booking, nil
}

// UpdateBooking resolver
func (r *mutationResolver) UpdateBooking(ctx context.Context, id string, checkIn *string, checkOut *string, status *string) (*entities.Booking, error) {
	bookingID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	booking := &entities.Booking{
		ID: bookingID,
	}
	if checkIn != nil {
		booking.CheckIn = *checkIn
	}
	if checkOut != nil {
		booking.CheckOut = *checkOut
	}
	if status != nil {
		booking.Status = *status
	}
	err = r.Usecase.UpdateBooking(ctx, booking)
	if err != nil {
		return nil, err
	}
	return booking, nil
}

// DeleteBooking resolver
func (r *mutationResolver) DeleteBooking(ctx context.Context, id string) (bool, error) {
	bookingID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.Usecase.DeleteBooking(ctx, bookingID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateCustomer resolver
func (r *mutationResolver) CreateCustomer(ctx context.Context, firstName string, lastName string, email string, phone string) (*entities.Customer, error) {
	customer := &entities.Customer{
		FirstName: firstName,
		LastName:  lastName,
		Email:     email,
		Phone:     phone,
	}
	customerID, err := r.Usecase.CreateCustomer(ctx, customer)
	if err != nil {
		return nil, err
	}
	customer.ID = customerID
	return customer, nil
}

// UpdateCustomer resolver
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id string, firstName *string, lastName *string, email *string, phone *string) (*entities.Customer, error) {
	customerID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	customer := &entities.Customer{
		ID: customerID,
	}
	if firstName != nil {
		customer.FirstName = *firstName
	}
	if lastName != nil {
		customer.LastName = *lastName
	}
	if email != nil {
		customer.Email = *email
	}
	if phone != nil {
		customer.Phone = *phone
	}
	err = r.Usecase.UpdateCustomer(ctx, customer)
	if err != nil {
		return nil, err
	}
	return customer, nil
}

// DeleteCustomer resolver
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string) (bool, error) {
	customerID, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.Usecase.DeleteCustomer(ctx, customerID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Hotels resolver
func (r *queryResolver) Hotels(ctx context.Context) ([]*entities.Hotel, error) {
	hotels, err := r.Usecase.GetAllHotels(ctx)
	if err != nil {
		return nil, err
	}
	return hotels, nil
}

// Hotel resolver
func (r *queryResolver) Hotel(ctx context.Context, id string) (*entities.Hotel, error) {
	hotelID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	hotel, err := r.Usecase.GetHotelByID(ctx, hotelID)
	if err != nil {
		return nil, err
	}
	return hotel, nil
}

// Rooms resolver
func (r *queryResolver) Rooms(ctx context.Context) ([]*entities.Room, error) {
	rooms, err := r.Usecase.GetAllRooms(ctx)
	if err != nil {
		return nil, err
	}
	return rooms, nil
}

// Room resolver
func (r *queryResolver) Room(ctx context.Context, id string) (*entities.Room, error) {
	roomID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	room, err := r.Usecase.GetRoomByID(ctx, roomID)
	if err != nil {
		return nil, err
	}
	return room, nil
}

// Bookings resolver
func (r *queryResolver) Bookings(ctx context.Context) ([]*entities.Booking, error) {
	bookings, err := r.Usecase.GetAllBookings(ctx)
	if err != nil {
		return nil, err
	}
	return bookings, nil
}

// Booking resolver
func (r *queryResolver) Booking(ctx context.Context, id string) (*entities.Booking, error) {
	bookingID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	booking, err := r.Usecase.GetBookingByID(ctx, bookingID)
	if err != nil {
		return nil, err
	}
	return booking, nil
}

// Customers resolver
func (r *queryResolver) Customers(ctx context.Context) ([]*entities.Customer, error) {
	customers, err := r.Usecase.GetAllCustomers(ctx)
	if err != nil {
		return nil, err
	}
	return customers, nil
}

// Customer resolver
func (r *queryResolver) Customer(ctx context.Context, id string) (*entities.Customer, error) {
	customerID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	customer, err := r.Usecase.GetCustomerByID(ctx, customerID)
	if err != nil {
		return nil, err
	}
	return customer, nil
}

// Room Hotel field resolver
func (r *roomResolver) Hotel(ctx context.Context, obj *entities.Room) (*entities.Hotel, error) {
	hotel, err := r.Usecase.GetHotelByID(ctx, obj.HotelID)
	if err != nil {
		return nil, err
	}
	return hotel, nil
}

// Booking returns generated.BookingResolver implementation.
func (r *Resolver) Booking() generated.BookingResolver { return &bookingResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Room returns generated.RoomResolver implementation.
func (r *Resolver) Room() generated.RoomResolver { return &roomResolver{r} }

type bookingResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *hotelResolver) Rooms(ctx context.Context, obj *entities.Hotel) ([]*entities.Room, error) {
	rooms, err := r.Usecase.GetRoomsByHotelID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return rooms, nil
}
func (r *Resolver) Hotel() generated.HotelResolver {
	return &hotelResolver{r}
}
type hotelResolver struct{ *Resolver }
*/
